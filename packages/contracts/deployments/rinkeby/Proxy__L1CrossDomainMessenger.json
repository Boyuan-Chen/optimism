{
  "address": "0x04A8F028c790d9Abb44f378Adf356a7788BBaBCC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_libAddressManager",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_implementationName",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    }
  ],
  "transactionHash": "0xd9dd84cecd0fa3ac5be00ac96ca1fb72b294196efb6ca44a2bd8a9b05011d96c",
  "receipt": {
    "to": null,
    "from": "0x2A2D5e9D1A0f3485f3D5c3fd983028E0f226FeD6",
    "contractAddress": "0x04A8F028c790d9Abb44f378Adf356a7788BBaBCC",
    "transactionIndex": 36,
    "gasUsed": "392830",
    "logsBloom": "0x
    "blockHash": "0x44685a6db24a99ba626beaf6831a575c5075c6ed21b97adc28a5d68b77ad08ae",
    "transactionHash": "0xd9dd84cecd0fa3ac5be00ac96ca1fb72b294196efb6ca44a2bd8a9b05011d96c",
    "logs": [],
    "blockNumber": 9368206,
    "cumulativeGasUsed": "4952701",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE8cbD28a5cc96ca86513ad8847D344EE634D0A9D",
    "L1CrossDomainMessenger"
  ],
  "solcInputHash": "57c40cf5c155d19ac0bd1dac14b9b230",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_libAddressManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_implementationName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_implementationName\":\"implementationName of the contract to proxy to.\",\"_libAddressManager\":\"Address of the Lib_AddressManager.\"}}},\"title\":\"Lib_ResolvedDelegateProxy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/resolver/Lib_ResolvedDelegateProxy.sol\":\"Lib_ResolvedDelegateProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/libraries/resolver/Lib_AddressManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/* External Imports */\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Lib_AddressManager\\n */\\ncontract Lib_AddressManager is Ownable {\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AddressSet(\\n        string indexed _name,\\n        address _newAddress,\\n        address _oldAddress\\n    );\\n\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    mapping (bytes32 => address) private addresses;\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Changes the address associated with a particular name.\\n     * @param _name String name to associate an address with.\\n     * @param _address Address to associate with the name.\\n     */\\n    function setAddress(\\n        string memory _name,\\n        address _address\\n    )\\n        external\\n        onlyOwner\\n    {\\n        bytes32 nameHash = _getNameHash(_name);\\n        address oldAddress = addresses[nameHash];\\n        addresses[nameHash] = _address;\\n\\n        emit AddressSet(\\n            _name,\\n            _address,\\n            oldAddress\\n        );\\n    }\\n\\n    /**\\n     * Retrieves the address associated with a given name.\\n     * @param _name Name to retrieve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function getAddress(\\n        string memory _name\\n    )\\n        external\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        return addresses[_getNameHash(_name)];\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Computes the hash of a name.\\n     * @param _name Name to compute a hash for.\\n     * @return Hash of the given name.\\n     */\\n    function _getNameHash(\\n        string memory _name\\n    )\\n        internal\\n        pure\\n        returns (\\n            bytes32\\n        )\\n    {\\n        return keccak256(abi.encodePacked(_name));\\n    }\\n}\\n\",\"keccak256\":\"0x0faaea7d284026771ac72c6242886aab90f08caf4c96eade8214cacc6ba4dae3\",\"license\":\"MIT\"},\"contracts/libraries/resolver/Lib_ResolvedDelegateProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/* Library Imports */\\nimport { Lib_AddressManager } from \\\"./Lib_AddressManager.sol\\\";\\n\\n/**\\n * @title Lib_ResolvedDelegateProxy\\n */\\ncontract Lib_ResolvedDelegateProxy {\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    // Using mappings to store fields to avoid overwriting storage slots in the\\n    // implementation contract. For example, instead of storing these fields at\\n    // storage slot `0` & `1`, they are stored at `keccak256(key + slot)`.\\n    // See: https://solidity.readthedocs.io/en/v0.7.0/internals/layout_in_storage.html\\n    // NOTE: Do not use this code in your own contract system.\\n    //      There is a known flaw in this contract, and we will remove it from the repository\\n    //      in the near future. Due to the very limited way that we are using it, this flaw is\\n    //      not an issue in our system.\\n    mapping (address => string) private implementationName;\\n    mapping (address => Lib_AddressManager) private addressManager;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Lib_AddressManager.\\n     * @param _implementationName implementationName of the contract to proxy to.\\n     */\\n    constructor(\\n        address _libAddressManager,\\n        string memory _implementationName\\n    ) {\\n        addressManager[address(this)] = Lib_AddressManager(_libAddressManager);\\n        implementationName[address(this)] = _implementationName;\\n    }\\n\\n\\n    /*********************\\n     * Fallback Function *\\n     *********************/\\n\\n    fallback()\\n        external\\n        payable\\n    {\\n        address target = addressManager[address(this)].getAddress(\\n            (implementationName[address(this)])\\n        );\\n\\n        require(\\n            target != address(0),\\n            \\\"Target address must be initialized.\\\"\\n        );\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(msg.data);\\n\\n        if (success == true) {\\n            assembly {\\n                return(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            assembly {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3213f8fa1a93a39c47d5af52b3571d7149798be8ec5262595b8a5d9d975e3753\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620009a2380380620009a2833981810160405281019062000037919062000257565b81600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090805190602001906200010992919062000112565b5050506200048f565b828054620001209062000386565b90600052602060002090601f01602090048101928262000144576000855562000190565b82601f106200015f57805160ff191683800117855562000190565b8280016001018555821562000190579182015b828111156200018f57825182559160200191906001019062000172565b5b5090506200019f9190620001a3565b5090565b5b80821115620001be576000816000905550600101620001a4565b5090565b6000620001d9620001d384620002e6565b620002bd565b905082815260208101848484011115620001f857620001f762000455565b5b6200020584828562000350565b509392505050565b6000815190506200021e8162000475565b92915050565b600082601f8301126200023c576200023b62000450565b5b81516200024e848260208601620001c2565b91505092915050565b600080604083850312156200027157620002706200045f565b5b600062000281858286016200020d565b925050602083015167ffffffffffffffff811115620002a557620002a46200045a565b5b620002b38582860162000224565b9150509250929050565b6000620002c9620002dc565b9050620002d78282620003bc565b919050565b6000604051905090565b600067ffffffffffffffff82111562000304576200030362000421565b5b6200030f8262000464565b9050602081019050919050565b6000620003298262000330565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200037057808201518184015260208101905062000353565b8381111562000380576000848401525b50505050565b600060028204905060018216806200039f57607f821691505b60208210811415620003b657620003b5620003f2565b5b50919050565b620003c78262000464565b810181811067ffffffffffffffff82111715620003e957620003e862000421565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b62000480816200031c565b81146200048c57600080fd5b50565b610503806200049f6000396000f3fe60806040526000600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf40fac16000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518263ffffffff1660e01b81526004016100db919061034d565b60206040518083038186803b1580156100f357600080fd5b505afa158015610107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012b919061023f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561019d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101949061036f565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff166000366040516101c8929190610334565b600060405180830381855af49150503d8060008114610203576040519150601f19603f3d011682016040523d82523d6000602084013e610208565b606091505b509150915060011515821515141561022257805160208201f35b805160208201fd5b600081519050610239816104b6565b92915050565b60006020828403121561025557610254610462565b5b60006102638482850161022a565b91505092915050565b600061027883856103a4565b93506102858385846103f2565b82840190509392505050565b6000815461029e81610401565b6102a881866103af565b945060018216600081146102c357600181146102d557610308565b60ff1983168652602086019350610308565b6102de8561038f565b60005b83811015610300578154818901526001820191506020810190506102e1565b808801955050505b50505092915050565b600061031e6023836103af565b915061032982610467565b604082019050919050565b600061034182848661026c565b91508190509392505050565b600060208201905081810360008301526103678184610291565b905092915050565b6000602082019050818103600083015261038881610311565b9050919050565b60008190508160005260206000209050919050565b600081905092915050565b600082825260208201905092915050565b60006103cb826103d2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b6000600282049050600182168061041957607f821691505b6020821081141561042d5761042c610433565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b7f5461726765742061646472657373206d75737420626520696e697469616c697a60008201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b6104bf816103c0565b81146104ca57600080fd5b5056fea2646970667358221220e9d6fdab78a85caa97b8fb3c6d837df42096fedc146f7f3591b587f1326df61664736f6c63430008070033",
  "deployedBytecode": "0x60806040526000600160003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf40fac16000803073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518263ffffffff1660e01b81526004016100db919061034d565b60206040518083038186803b1580156100f357600080fd5b505afa158015610107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012b919061023f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561019d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101949061036f565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff166000366040516101c8929190610334565b600060405180830381855af49150503d8060008114610203576040519150601f19603f3d011682016040523d82523d6000602084013e610208565b606091505b509150915060011515821515141561022257805160208201f35b805160208201fd5b600081519050610239816104b6565b92915050565b60006020828403121561025557610254610462565b5b60006102638482850161022a565b91505092915050565b600061027883856103a4565b93506102858385846103f2565b82840190509392505050565b6000815461029e81610401565b6102a881866103af565b945060018216600081146102c357600181146102d557610308565b60ff1983168652602086019350610308565b6102de8561038f565b60005b83811015610300578154818901526001820191506020810190506102e1565b808801955050505b50505092915050565b600061031e6023836103af565b915061032982610467565b604082019050919050565b600061034182848661026c565b91508190509392505050565b600060208201905081810360008301526103678184610291565b905092915050565b6000602082019050818103600083015261038881610311565b9050919050565b60008190508160005260206000209050919050565b600081905092915050565b600082825260208201905092915050565b60006103cb826103d2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b6000600282049050600182168061041957607f821691505b6020821081141561042d5761042c610433565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b7f5461726765742061646472657373206d75737420626520696e697469616c697a60008201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b6104bf816103c0565b81146104ca57600080fd5b5056fea2646970667358221220e9d6fdab78a85caa97b8fb3c6d837df42096fedc146f7f3591b587f1326df61664736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_implementationName": "implementationName of the contract to proxy to.",
          "_libAddressManager": "Address of the Lib_AddressManager."
        }
      }
    },
    "title": "Lib_ResolvedDelegateProxy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7869,
        "contract": "contracts/libraries/resolver/Lib_ResolvedDelegateProxy.sol:Lib_ResolvedDelegateProxy",
        "label": "implementationName",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 7874,
        "contract": "contracts/libraries/resolver/Lib_ResolvedDelegateProxy.sol:Lib_ResolvedDelegateProxy",
        "label": "addressManager",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(Lib_AddressManager)7824)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Lib_AddressManager)7824": {
        "encoding": "inplace",
        "label": "contract Lib_AddressManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(Lib_AddressManager)7824)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract Lib_AddressManager)",
        "numberOfBytes": "32",
        "value": "t_contract(Lib_AddressManager)7824"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}