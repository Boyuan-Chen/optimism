{
  "address": "0x68855f2186bcD5409d1458eCe0E1Ce8dbf3e4aB3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "getImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_code",
          "type": "bytes"
        }
      ],
      "name": "setCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_value",
          "type": "bytes32"
        }
      ],
      "name": "setStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7911fa2c6ecc718cc4d9e2c6271d89c2b8e5bd2fa3bba037100382cfb8988576",
  "receipt": {
    "to": null,
    "from": "0x2A2D5e9D1A0f3485f3D5c3fd983028E0f226FeD6",
    "contractAddress": "0x68855f2186bcD5409d1458eCe0E1Ce8dbf3e4aB3",
    "transactionIndex": 18,
    "gasUsed": "824659",
    "logsBloom": "0x
    "blockHash": "0x2d4fb808afd85676ec60af79640703aeddfdd161c3bdf38b4e37a27d1b5409df",
    "transactionHash": "0x7911fa2c6ecc718cc4d9e2c6271d89c2b8e5bd2fa3bba037100382cfb8988576",
    "logs": [],
    "blockNumber": 9368209,
    "cumulativeGasUsed": "5254352",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2A2D5e9D1A0f3485f3D5c3fd983028E0f226FeD6"
  ],
  "solcInputHash": "57c40cf5c155d19ac0bd1dac14b9b230",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"getImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_code\",\"type\":\"bytes\"}],\"name\":\"setCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_value\",\"type\":\"bytes32\"}],\"name\":\"setStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Basic ChugSplash proxy contract for L1. Very close to being a normal proxy but has added functions `setCode` and `setStorage` for changing the code or storage of the contract. Nifty! Note for future developers: do NOT make anything in this contract 'public' unless you know what you're doing. Anything public can potentially have a function signature that conflicts with a signature attached to the implementation contract. Public functions SHOULD always have the 'proxyCallIfNotOwner' modifier unless there's some *really* good reason not to have that modifier. And there almost certainly is not a good reason to not have that modifier. Beware!\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_owner\":\"Address of the initial contract owner.\"}},\"getImplementation()\":{\"returns\":{\"_0\":\"Implementation address.\"}},\"getOwner()\":{\"returns\":{\"_0\":\"Owner address.\"}},\"setCode(bytes)\":{\"params\":{\"_code\":\"New contract code to run inside this contract.\"}},\"setOwner(address)\":{\"params\":{\"_owner\":\"New owner of the proxy contract.\"}},\"setStorage(bytes32,bytes32)\":{\"params\":{\"_key\":\"Storage key to modify.\",\"_value\":\"New value for the storage key.\"}}},\"title\":\"L1ChugSplashProxy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getImplementation()\":{\"notice\":\"Queries the implementation address. Can only be called by the owner OR by making an eth_call and setting the \\\"from\\\" address to address(0).\"},\"getOwner()\":{\"notice\":\"Queries the owner of the proxy contract. Can only be called by the owner OR by making an eth_call and setting the \\\"from\\\" address to address(0).\"},\"setCode(bytes)\":{\"notice\":\"Sets the code that should be running behind this proxy. Note that this scheme is a bit different from the standard proxy scheme where one would typically deploy the code separately and then set the implementation address. We're doing it this way because it gives us a lot more freedom on the client side. Can only be triggered by the contract owner.\"},\"setOwner(address)\":{\"notice\":\"Changes the owner of the proxy contract. Only callable by the owner.\"},\"setStorage(bytes32,bytes32)\":{\"notice\":\"Modifies some storage slot within the proxy contract. Gives us a lot of power to perform upgrades in a more transparent way. Only callable by the owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chugsplash/L1ChugSplashProxy.sol\":\"L1ChugSplashProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/chugsplash/L1ChugSplashProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { iL1ChugSplashDeployer } from \\\"./interfaces/iL1ChugSplashDeployer.sol\\\";\\n\\n/**\\n * @title L1ChugSplashProxy\\n * @dev Basic ChugSplash proxy contract for L1. Very close to being a normal proxy but has added\\n * functions `setCode` and `setStorage` for changing the code or storage of the contract. Nifty!\\n *\\n * Note for future developers: do NOT make anything in this contract 'public' unless you know what\\n * you're doing. Anything public can potentially have a function signature that conflicts with a\\n * signature attached to the implementation contract. Public functions SHOULD always have the\\n * 'proxyCallIfNotOwner' modifier unless there's some *really* good reason not to have that\\n * modifier. And there almost certainly is not a good reason to not have that modifier. Beware!\\n */\\ncontract L1ChugSplashProxy {\\n\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    // \\\"Magic\\\" prefix. When prepended to some arbitrary bytecode and used to create a contract, the\\n    // appended bytecode will be deployed as given.\\n    bytes13 constant internal DEPLOY_CODE_PREFIX = 0x600D380380600D6000396000f3;\\n\\n    // bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)\\n    bytes32 constant internal IMPLEMENTATION_KEY =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    // bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1)\\n    bytes32 constant internal OWNER_KEY =\\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _owner Address of the initial contract owner.\\n     */\\n    constructor(\\n        address _owner\\n    ) {\\n        _setOwner(_owner);\\n    }\\n\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /**\\n     * Blocks a function from being called when the parent signals that the system should be paused\\n     * via an isUpgrading function.\\n     */\\n    modifier onlyWhenNotPaused() {\\n        address owner = _getOwner();\\n\\n        // We do a low-level call because there's no guarantee that the owner actually *is* an\\n        // L1ChugSplashDeployer contract and Solidity will throw errors if we do a normal call and\\n        // it turns out that it isn't the right type of contract.\\n        (bool success, bytes memory returndata) = owner.staticcall(\\n            abi.encodeWithSelector(\\n                iL1ChugSplashDeployer.isUpgrading.selector\\n            )\\n        );\\n\\n        // If the call was unsuccessful then we assume that there's no \\\"isUpgrading\\\" method and we\\n        // can just continue as normal. We also expect that the return value is exactly 32 bytes\\n        // long. If this isn't the case then we can safely ignore the result.\\n        if (success && returndata.length == 32) {\\n            // Although the expected value is a *boolean*, it's safer to decode as a uint256 in the\\n            // case that the isUpgrading function returned something other than 0 or 1. But we only\\n            // really care about the case where this value is 0 (= false).\\n            uint256 ret = abi.decode(returndata, (uint256));\\n            require(\\n                ret == 0,\\n                \\\"L1ChugSplashProxy: system is currently being upgraded\\\"\\n            );\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * Makes a proxy call instead of triggering the given function when the caller is either the\\n     * owner or the zero address. Caller can only ever be the zero address if this function is\\n     * being called off-chain via eth_call, which is totally fine and can be convenient for\\n     * client-side tooling. Avoids situations where the proxy and implementation share a sighash\\n     * and the proxy function ends up being called instead of the implementation one.\\n     *\\n     * Note: msg.sender == address(0) can ONLY be triggered off-chain via eth_call. If there's a\\n     * way for someone to send a transaction with msg.sender == address(0) in any real context then\\n     * we have much bigger problems. Primary reason to include this additional allowed sender is\\n     * because the owner address can be changed dynamically and we do not want clients to have to\\n     * keep track of the current owner in order to make an eth_call that doesn't trigger the\\n     * proxied contract.\\n     */\\n    modifier proxyCallIfNotOwner() {\\n        if (msg.sender == _getOwner() || msg.sender == address(0)) {\\n            _;\\n        } else {\\n            // This WILL halt the call frame on completion.\\n            _doProxyCall();\\n        }\\n    }\\n\\n\\n    /*********************\\n     * Fallback Function *\\n     *********************/\\n\\n    fallback()\\n        external\\n        payable\\n    {\\n        // Proxy call by default.\\n        _doProxyCall();\\n    }\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sets the code that should be running behind this proxy. Note that this scheme is a bit\\n     * different from the standard proxy scheme where one would typically deploy the code\\n     * separately and then set the implementation address. We're doing it this way because it gives\\n     * us a lot more freedom on the client side. Can only be triggered by the contract owner.\\n     * @param _code New contract code to run inside this contract.\\n     */\\n    function setCode(\\n        bytes memory _code\\n    )\\n        proxyCallIfNotOwner\\n        public\\n    {\\n        // Get the code hash of the current implementation.\\n        address implementation = _getImplementation();\\n\\n        // If the code hash matches the new implementation then we return early.\\n        if (keccak256(_code) == _getAccountCodeHash(implementation)) {\\n            return;\\n        }\\n\\n        // Create the deploycode by appending the magic prefix.\\n        bytes memory deploycode = abi.encodePacked(\\n            DEPLOY_CODE_PREFIX,\\n            _code\\n        );\\n\\n        // Deploy the code and set the new implementation address.\\n        address newImplementation;\\n        assembly {\\n            newImplementation := create(0x0, add(deploycode, 0x20), mload(deploycode))\\n        }\\n\\n        // Check that the code was actually deployed correctly. I'm not sure if you can ever\\n        // actually fail this check. Should only happen if the contract creation from above runs\\n        // out of gas but this parent execution thread does NOT run out of gas. Seems like we\\n        // should be doing this check anyway though.\\n        require(\\n            _getAccountCodeHash(newImplementation) == keccak256(_code),\\n            \\\"L1ChugSplashProxy: code was not correctly deployed.\\\"\\n        );\\n\\n        _setImplementation(newImplementation);\\n    }\\n\\n    /**\\n     * Modifies some storage slot within the proxy contract. Gives us a lot of power to perform\\n     * upgrades in a more transparent way. Only callable by the owner.\\n     * @param _key Storage key to modify.\\n     * @param _value New value for the storage key.\\n     */\\n    function setStorage(\\n        bytes32 _key,\\n        bytes32 _value\\n    )\\n        proxyCallIfNotOwner\\n        public\\n    {\\n        assembly {\\n            sstore(_key, _value)\\n        }\\n    }\\n\\n    /**\\n     * Changes the owner of the proxy contract. Only callable by the owner.\\n     * @param _owner New owner of the proxy contract.\\n     */\\n    function setOwner(\\n        address _owner\\n    )\\n        proxyCallIfNotOwner\\n        public\\n    {\\n        _setOwner(_owner);\\n    }\\n\\n    /**\\n     * Queries the owner of the proxy contract. Can only be called by the owner OR by making an\\n     * eth_call and setting the \\\"from\\\" address to address(0).\\n     * @return Owner address.\\n     */\\n    function getOwner()\\n        proxyCallIfNotOwner\\n        public\\n        returns (\\n            address\\n        )\\n    {\\n        return _getOwner();\\n    }\\n\\n    /**\\n     * Queries the implementation address. Can only be called by the owner OR by making an\\n     * eth_call and setting the \\\"from\\\" address to address(0).\\n     * @return Implementation address.\\n     */\\n    function getImplementation()\\n        proxyCallIfNotOwner\\n        public\\n        returns (\\n            address\\n        )\\n    {\\n        return _getImplementation();\\n    }\\n\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Sets the implementation address.\\n     * @param _implementation New implementation address.\\n     */\\n    function _setImplementation(\\n        address _implementation\\n    )\\n        internal\\n    {\\n        assembly {\\n            sstore(IMPLEMENTATION_KEY, _implementation)\\n        }\\n    }\\n\\n    /**\\n     * Queries the implementation address.\\n     * @return Implementation address.\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        address implementation;\\n        assembly {\\n            implementation := sload(IMPLEMENTATION_KEY)\\n        }\\n        return implementation;\\n    }\\n\\n    /**\\n     * Changes the owner of the proxy contract.\\n     * @param _owner New owner of the proxy contract.\\n     */\\n    function _setOwner(\\n        address _owner\\n    )\\n        internal\\n    {\\n        assembly {\\n            sstore(OWNER_KEY, _owner)\\n        }\\n    }\\n\\n    /**\\n     * Queries the owner of the proxy contract.\\n     * @return Owner address.\\n     */\\n    function _getOwner()\\n        internal\\n        view\\n        returns (\\n            address\\n        )\\n    {\\n        address owner;\\n        assembly {\\n            owner := sload(OWNER_KEY)\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * Gets the code hash for a given account.\\n     * @param _account Address of the account to get a code hash for.\\n     * @return Code hash for the account.\\n     */\\n    function _getAccountCodeHash(\\n        address _account\\n    )\\n        internal\\n        view\\n        returns (\\n            bytes32\\n        )\\n    {\\n        bytes32 codeHash;\\n        assembly {\\n            codeHash := extcodehash(_account)\\n        }\\n        return codeHash;\\n    }\\n\\n    /**\\n     * Performs the proxy call via a delegatecall.\\n     */\\n    function _doProxyCall()\\n        onlyWhenNotPaused\\n        internal\\n    {\\n        address implementation = _getImplementation();\\n\\n        require(\\n            implementation != address(0),\\n            \\\"L1ChugSplashProxy: implementation is not set yet\\\"\\n        );\\n\\n        assembly {\\n            // Copy calldata into memory at 0x0....calldatasize.\\n            calldatacopy(0x0, 0x0, calldatasize())\\n\\n            // Perform the delegatecall, make sure to pass all available gas.\\n            let success := delegatecall(gas(), implementation, 0x0, calldatasize(), 0x0, 0x0)\\n\\n            // Copy returndata into memory at 0x0....returndatasize. Note that this *will*\\n            // overwrite the calldata that we just copied into memory but that doesn't really\\n            // matter because we'll be returning in a second anyway.\\n            returndatacopy(0x0, 0x0, returndatasize())\\n\\n            // Success == 0 means a revert. We'll revert too and pass the data up.\\n            if iszero(success) {\\n                revert(0x0, returndatasize())\\n            }\\n\\n            // Otherwise we'll just return and pass the data up.\\n            return(0x0, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1f99c4d5e4f9c95aee307648151ce74a821d208a9aeb718561987c21574728a4\",\"license\":\"MIT\"},\"contracts/chugsplash/interfaces/iL1ChugSplashDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title iL1ChugSplashDeployer\\n */\\ninterface iL1ChugSplashDeployer {\\n    function isUpgrading()\\n        external\\n        view\\n        returns (\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x5c0d5ba2b757c456a94c7fe75317134f94caa9854473b9b446910e8f3fc98ba8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405162000e9438038062000e9483398181016040528101906100349190610084565b6100438161004960201b60201c565b506100ff565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035550565b60008151905061007e816100e8565b92915050565b60006020828403121561009a576100996100e3565b5b60006100a88482850161006f565b91505092915050565b60006100bc826100c3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100f1816100b1565b81146100fc57600080fd5b50565b610d85806200010f6000396000f3fe60806040526004361061004e5760003560e01c806313af4035146100595780636c5d4ad014610082578063893d20e8146100ab5780639b0b0fda146100d6578063aaf10f42146100ff5761004f565b5b61005761012a565b005b34801561006557600080fd5b50610080600480360381019061007b9190610800565b61031b565b005b34801561008e57600080fd5b506100a960048036038101906100a4919061086d565b6103a7565b005b3480156100b757600080fd5b506100c06104f4565b6040516100cd91906109e2565b60405180910390f35b3480156100e257600080fd5b506100fd60048036038101906100f8919061082d565b610583565b005b34801561010b57600080fd5b5061011461060a565b60405161012191906109e2565b60405180910390f35b6000610134610699565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663b794726260e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101c891906109cb565b600060405180830381855afa9150503d8060008114610203576040519150601f19603f3d011682016040523d82523d6000602084013e610208565b606091505b509150915081801561021b575060208151145b1561027d5760008180602001905181019061023691906108b6565b90506000811461027b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027290610a3d565b60405180910390fd5b505b60006102876106c7565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f0906109fd565b60405180910390fd5b3660008037600080366000845af43d6000803e80610316573d6000fd5b3d6000f35b610323610699565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103885750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561039b57610396816106f5565b6103a4565b6103a361012a565b5b50565b6103af610699565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806104145750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b156104e85760006104236106c7565b905061042e8161071b565b8280519060200120141561044257506104e3565b60006c600d380380600d6000396000f360981b836040516020016104679291906109a3565b604051602081830303815290604052905060008151602083016000f0905083805190602001206104968261071b565b146104d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cd90610a1d565b60405180910390fd5b6104df8161072b565b5050505b6104f1565b6104f061012a565b5b50565b60006104fe610699565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105635750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561057757610570610699565b9050610580565b61057f61012a565b5b90565b61058b610699565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105f05750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b156105fd57808255610606565b61060561012a565b5b5050565b6000610614610699565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106795750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561068d576106866106c7565b9050610696565b61069561012a565b5b90565b6000807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490508091505090565b6000807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490508091505090565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035550565b600080823f905080915050919050565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5550565b600061076461075f84610a82565b610a5d565b9050828152602081018484840111156107805761077f610bfd565b5b61078b848285610b4c565b509392505050565b6000813590506107a281610d0a565b92915050565b6000813590506107b781610d21565b92915050565b600082601f8301126107d2576107d1610bf8565b5b81356107e2848260208601610751565b91505092915050565b6000815190506107fa81610d38565b92915050565b60006020828403121561081657610815610c07565b5b600061082484828501610793565b91505092915050565b6000806040838503121561084457610843610c07565b5b6000610852858286016107a8565b9250506020610863858286016107a8565b9150509250929050565b60006020828403121561088357610882610c07565b5b600082013567ffffffffffffffff8111156108a1576108a0610c02565b5b6108ad848285016107bd565b91505092915050565b6000602082840312156108cc576108cb610c07565b5b60006108da848285016107eb565b91505092915050565b6108ec81610ada565b82525050565b6109036108fe82610aec565b610bbf565b82525050565b600061091482610ab3565b61091e8185610abe565b935061092e818560208601610b5b565b80840191505092915050565b6000610947603083610ac9565b915061095282610c1d565b604082019050919050565b600061096a603383610ac9565b915061097582610c6c565b604082019050919050565b600061098d603583610ac9565b915061099882610cbb565b604082019050919050565b60006109af82856108f2565b600d820191506109bf8284610909565b91508190509392505050565b60006109d78284610909565b915081905092915050565b60006020820190506109f760008301846108e3565b92915050565b60006020820190508181036000830152610a168161093a565b9050919050565b60006020820190508181036000830152610a368161095d565b9050919050565b60006020820190508181036000830152610a5681610980565b9050919050565b6000610a67610a78565b9050610a738282610b8e565b919050565b6000604051905090565b600067ffffffffffffffff821115610a9d57610a9c610bc9565b5b610aa682610c0c565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610ae582610b22565b9050919050565b60007fffffffffffffffffffffffffff0000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610b79578082015181840152602081019050610b5e565b83811115610b88576000848401525b50505050565b610b9782610c0c565b810181811067ffffffffffffffff82111715610bb657610bb5610bc9565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4c314368756753706c61736850726f78793a20696d706c656d656e746174696f60008201527f6e206973206e6f74207365742079657400000000000000000000000000000000602082015250565b7f4c314368756753706c61736850726f78793a20636f646520776173206e6f742060008201527f636f72726563746c79206465706c6f7965642e00000000000000000000000000602082015250565b7f4c314368756753706c61736850726f78793a2073797374656d2069732063757260008201527f72656e746c79206265696e672075706772616465640000000000000000000000602082015250565b610d1381610ada565b8114610d1e57600080fd5b50565b610d2a81610b18565b8114610d3557600080fd5b50565b610d4181610b42565b8114610d4c57600080fd5b5056fea26469706673582212204e58fa2d79b47e30dab38630b56fd0e85e5d90e32d38ec7049b91e45e1200cca64736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c806313af4035146100595780636c5d4ad014610082578063893d20e8146100ab5780639b0b0fda146100d6578063aaf10f42146100ff5761004f565b5b61005761012a565b005b34801561006557600080fd5b50610080600480360381019061007b9190610800565b61031b565b005b34801561008e57600080fd5b506100a960048036038101906100a4919061086d565b6103a7565b005b3480156100b757600080fd5b506100c06104f4565b6040516100cd91906109e2565b60405180910390f35b3480156100e257600080fd5b506100fd60048036038101906100f8919061082d565b610583565b005b34801561010b57600080fd5b5061011461060a565b60405161012191906109e2565b60405180910390f35b6000610134610699565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663b794726260e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101c891906109cb565b600060405180830381855afa9150503d8060008114610203576040519150601f19603f3d011682016040523d82523d6000602084013e610208565b606091505b509150915081801561021b575060208151145b1561027d5760008180602001905181019061023691906108b6565b90506000811461027b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027290610a3d565b60405180910390fd5b505b60006102876106c7565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f0906109fd565b60405180910390fd5b3660008037600080366000845af43d6000803e80610316573d6000fd5b3d6000f35b610323610699565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806103885750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561039b57610396816106f5565b6103a4565b6103a361012a565b5b50565b6103af610699565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806104145750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b156104e85760006104236106c7565b905061042e8161071b565b8280519060200120141561044257506104e3565b60006c600d380380600d6000396000f360981b836040516020016104679291906109a3565b604051602081830303815290604052905060008151602083016000f0905083805190602001206104968261071b565b146104d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cd90610a1d565b60405180910390fd5b6104df8161072b565b5050505b6104f1565b6104f061012a565b5b50565b60006104fe610699565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105635750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561057757610570610699565b9050610580565b61057f61012a565b5b90565b61058b610699565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806105f05750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b156105fd57808255610606565b61060561012a565b5b5050565b6000610614610699565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106795750600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1561068d576106866106c7565b9050610696565b61069561012a565b5b90565b6000807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490508091505090565b6000807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490508091505090565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035550565b600080823f905080915050919050565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5550565b600061076461075f84610a82565b610a5d565b9050828152602081018484840111156107805761077f610bfd565b5b61078b848285610b4c565b509392505050565b6000813590506107a281610d0a565b92915050565b6000813590506107b781610d21565b92915050565b600082601f8301126107d2576107d1610bf8565b5b81356107e2848260208601610751565b91505092915050565b6000815190506107fa81610d38565b92915050565b60006020828403121561081657610815610c07565b5b600061082484828501610793565b91505092915050565b6000806040838503121561084457610843610c07565b5b6000610852858286016107a8565b9250506020610863858286016107a8565b9150509250929050565b60006020828403121561088357610882610c07565b5b600082013567ffffffffffffffff8111156108a1576108a0610c02565b5b6108ad848285016107bd565b91505092915050565b6000602082840312156108cc576108cb610c07565b5b60006108da848285016107eb565b91505092915050565b6108ec81610ada565b82525050565b6109036108fe82610aec565b610bbf565b82525050565b600061091482610ab3565b61091e8185610abe565b935061092e818560208601610b5b565b80840191505092915050565b6000610947603083610ac9565b915061095282610c1d565b604082019050919050565b600061096a603383610ac9565b915061097582610c6c565b604082019050919050565b600061098d603583610ac9565b915061099882610cbb565b604082019050919050565b60006109af82856108f2565b600d820191506109bf8284610909565b91508190509392505050565b60006109d78284610909565b915081905092915050565b60006020820190506109f760008301846108e3565b92915050565b60006020820190508181036000830152610a168161093a565b9050919050565b60006020820190508181036000830152610a368161095d565b9050919050565b60006020820190508181036000830152610a5681610980565b9050919050565b6000610a67610a78565b9050610a738282610b8e565b919050565b6000604051905090565b600067ffffffffffffffff821115610a9d57610a9c610bc9565b5b610aa682610c0c565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610ae582610b22565b9050919050565b60007fffffffffffffffffffffffffff0000000000000000000000000000000000000082169050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610b79578082015181840152602081019050610b5e565b83811115610b88576000848401525b50505050565b610b9782610c0c565b810181811067ffffffffffffffff82111715610bb657610bb5610bc9565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4c314368756753706c61736850726f78793a20696d706c656d656e746174696f60008201527f6e206973206e6f74207365742079657400000000000000000000000000000000602082015250565b7f4c314368756753706c61736850726f78793a20636f646520776173206e6f742060008201527f636f72726563746c79206465706c6f7965642e00000000000000000000000000602082015250565b7f4c314368756753706c61736850726f78793a2073797374656d2069732063757260008201527f72656e746c79206265696e672075706772616465640000000000000000000000602082015250565b610d1381610ada565b8114610d1e57600080fd5b50565b610d2a81610b18565b8114610d3557600080fd5b50565b610d4181610b42565b8114610d4c57600080fd5b5056fea26469706673582212204e58fa2d79b47e30dab38630b56fd0e85e5d90e32d38ec7049b91e45e1200cca64736f6c63430008070033",
  "devdoc": {
    "details": "Basic ChugSplash proxy contract for L1. Very close to being a normal proxy but has added functions `setCode` and `setStorage` for changing the code or storage of the contract. Nifty! Note for future developers: do NOT make anything in this contract 'public' unless you know what you're doing. Anything public can potentially have a function signature that conflicts with a signature attached to the implementation contract. Public functions SHOULD always have the 'proxyCallIfNotOwner' modifier unless there's some *really* good reason not to have that modifier. And there almost certainly is not a good reason to not have that modifier. Beware!",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_owner": "Address of the initial contract owner."
        }
      },
      "getImplementation()": {
        "returns": {
          "_0": "Implementation address."
        }
      },
      "getOwner()": {
        "returns": {
          "_0": "Owner address."
        }
      },
      "setCode(bytes)": {
        "params": {
          "_code": "New contract code to run inside this contract."
        }
      },
      "setOwner(address)": {
        "params": {
          "_owner": "New owner of the proxy contract."
        }
      },
      "setStorage(bytes32,bytes32)": {
        "params": {
          "_key": "Storage key to modify.",
          "_value": "New value for the storage key."
        }
      }
    },
    "title": "L1ChugSplashProxy",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getImplementation()": {
        "notice": "Queries the implementation address. Can only be called by the owner OR by making an eth_call and setting the \"from\" address to address(0)."
      },
      "getOwner()": {
        "notice": "Queries the owner of the proxy contract. Can only be called by the owner OR by making an eth_call and setting the \"from\" address to address(0)."
      },
      "setCode(bytes)": {
        "notice": "Sets the code that should be running behind this proxy. Note that this scheme is a bit different from the standard proxy scheme where one would typically deploy the code separately and then set the implementation address. We're doing it this way because it gives us a lot more freedom on the client side. Can only be triggered by the contract owner."
      },
      "setOwner(address)": {
        "notice": "Changes the owner of the proxy contract. Only callable by the owner."
      },
      "setStorage(bytes32,bytes32)": {
        "notice": "Modifies some storage slot within the proxy contract. Gives us a lot of power to perform upgrades in a more transparent way. Only callable by the owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}